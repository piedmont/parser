#!/usr/bin/env node
'use strict';

// Node packages
var Path = require('path');

// promises
var Promise = require('promise');

// filesystem +
var fs = require('fs-extra');

// log with colors
var colors = require('colors');

// Copy directory
var ncp   = require('ncp').ncp; 
ncp.limit = 16; // limit to N levels deep

// Package Info
var pkg = require('./package.json');

// CLI handler
var cmd = require('commander');

// HTML parser
var p5 = require('parse5');

// Unarchiver
var unzip = require('unzip');
 
// Local (for development)
var LOCAL = 'source/archive.zip';

// Constants
var TMP    = 'tmp/';
var OUTPUT = 'data/';

// types
var PHOTOS = 'PHOTOS';
var VIDEOS = 'VIDEOS';
var HTML   = 'HTML';

// extensions
var HTM = 'HTM';
var JPG = 'JPG';
var MP4 = 'MP4';
var CSS = 'CSS';

// Handle CLI command and options
cmd
  .version(pkg.version)
  .command('parse [extract]')
  .description('parse data exported from Facebook')
  .option('-d, --dir', 'Path is to unarchived export (flag)')
  .action(function (extract, options) {
    var dir = !!options.dir;  

    // if no path is provided, use local (for development)
    if (!extract) {
      extract = LOCAL;
      dir = false; // override dir flag, if provided
    }

    fs.remove(TMP, function (err) {
      if (err) explode(err);

      fs.ensureDir(TMP, function (err) {
          if (err) explode(err);

          if (dir) {
            ncp(extract, TMP, read);
          } else {   
            var stream = fs.createReadStream(extract);
            stream.pipe(unzip.Extract({ path: TMP }));
            stream.on('close', read);       
          }
      });
    });
  });

// read files
function readFiles(key, input, onSuccess, onError) {
  if (fs.lstatSync(input).isFile()) {
    readFile(key, input, onSuccess, onError);
  } else {
    fs.readdir(input, function (err, filenames) {
      if (err) onError(err);

      filenames.forEach(function (child) {
        var c = Path.join(input, child);
        if (fs.lstatSync(c).isDirectory()) {
          readFiles(key, c, onSuccess, onError);
        } else {
          readFile(key, c, onSuccess, onError);
        }
      });
    });
  }
}

// read file
function readFile(key, path, onSuccess, onError) {
  if (Path.extname(path).toLowerCase().includes('htm')) { 
    fs.readFile(path, 'utf-8', function (err, content) {
      if (err) onError(err);
      onSuccess(key, path, content);
    });
  } else {
    onSuccess(key, path, false);
  }
}

// Begin read
function read(err) {
  console.log('Begin read...');
  if (err) explode(err);

  var sources = {
    HTML:   [TMP + 'index.htm', TMP + 'html/'],
    PHOTOS: [TMP + 'photos/'],
    VIDEOS: [TMP + 'videos/']
  };

  var data = {
    HTML:   {},
    PHOTOS: {},
    VIDEOS: {}
  };

  for (var key in sources) {
    sources[key].forEach(function (source) {
      readFiles(key, source, function (key, path, content) {
        data[key][path] = content;
        
        var args = [
          '[' + key.toUpperCase().yellow + ']', // type
          path.underline // path
        ]
        if (!!content) {
          args.push('(' + content.length + ' characters)') // number
        }
        args.push('âœ“'.green) // checkmark
        console.log.apply(this, args)
        
        parse(data, key, path, content);
      }, function (err) {
        explode(err);
      });
    })
  }
} 

// begin parse
function parse(data, key, path, content) {
  var filename = Path.basename(path, Path.extname(path)).toUpperCase();
  var ext = Path.extname(path).toUpperCase().substr(1);
  
  switch (key) {
    case PHOTOS:
      if (ext.includes(HTML)) {
        // ignore
      } else if (ext.includes(JPG)) {
        // images
      }
      break;
      
    case VIDEOS:
      if (ext.includes(MP4)) {
        // video
      } else if (ext.includes(JPG)) {
        // frame
      }
      break;

    case HTML:
      if (ext.includes(HTM)) {
          var document = p5.parseFragment(content);
          var html = p5.serialize(document);

      } else if (ext.includes(CSS)) {
        // ignore
      }
      break;

    default:
      break;
  }
}

// explode
function explode(err) {
  console.error(err);
  throw err;
}

cmd.parse(process.argv);